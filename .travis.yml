# Generic .travis.yml file for running continuous integration on Travis-CI for
# any ROS package.
#
# Available here:
#   - https://github.com/felixduvallet/ros-travis-integration
#
# This installs ROS on a clean Travis-CI virtual machine, creates a ROS
# workspace, resolves all listed dependencies, and sets environment variables
# (setup.bash). Then, it compiles the entire ROS workspace (ensuring there are
# no compilation errors), and runs all the tests. If any of the compilation/test
# phases fail, the build is marked as a failure.
#
# We handle two types of package dependencies specified in the package manifest:
#   - system dependencies that can be installed using `rosdep`, including other
#     ROS packages and system libraries. These dependencies must be known to
#     `rosdistro` and are installed using apt-get.
#   - package dependencies that must be checked out from source. These are handled by
#     `wstool`, and should be listed in a file named dependencies.rosinstall.
#

# There are envioronment variables you may want to change, such as ROS_DISTRO,
# ROSINSTALL_FILE, and the CATKIN_OPTIONS file.  See the README.md for more
# information on these flags, and
# https://docs.travis-ci.com/user/environment-variables/ for information about
# Travis environment variables in general.
#
# Author: Felix Duvallet <felixd@gmail.com>

# NOTE: The build lifecycle on Travis.ci is something like this:
#    before_install
#    install
#    before_script
#    script
#    after_success or after_failure
#    after_script
#    OPTIONAL before_deploy
#    OPTIONAL deploy
#    OPTIONAL after_deploy

################################################################################

# Use ubuntu trusty (14.04) with sudo privileges.
sudo: required
stages:
  - names: deploy
    if: branch = master
language:
  - generic
cache:
  - apt
services:
  - docker
# Configuration variables. All variables are global now, but this can be used to
# trigger a build matrix for different ROS distributions if desired.
env:
  global:
    - ROS_DISTRO=kinetic
    - ROS_CI_DESKTOP="`lsb_release -cs`"  # e.g. [precise|trusty|...]
    - CI_SOURCE_PATH=$(pwd)
    - ROSINSTALL_FILE=$CI_SOURCE_PATH/dependencies.rosinstall
    - CATKIN_OPTIONS=$CI_SOURCE_PATH/catkin.options
    - ROS_PARALLEL_JOBS='-j8 -l6'
    # Set the python path manually to include /usr/-/python2.7/dist-packages
    # as this is where apt-get installs python packages.
    - PYTHONPATH=$PYTHONPATH:/usr/lib/python2.7/dist-packages:/usr/local/lib/python2.7/dist-packages

################################################################################

# Install system dependencies, namely a very barebones ROS setup.
before_install:
  - sudo apt-get update
  - sudo apt install -y qemu-system-arm qemu-user-static git reprepro gnupg
  - docker pull roborb/soft
  - docker run -t -d --rm --name roborb-soft -v ${PWD}/../:/var/tmp roborb/soft
  - docker exec -i roborb-soft bash -c "sudo apt update"
  - docker exec -i roborb-soft bash -c "sudo apt install wget apt-transport-https"
  - docker exec -i roborb-soft bash -c "wget -qO - https://rob-orb.github.io/debian/pub.key | sudo apt-key add -"
  - docker exec -i roborb-soft bash -c 'sudo echo "deb http://rob-orb.github.io/debian stretch main" > rob-orb.list'
  - docker exec -i roborb-soft bash -c "sudo cp rob-orb.list /etc/apt/sources.list.d/"
  - docker exec -i roborb-soft bash -c "rm rob-orb.list"
  - docker exec -i roborb-soft bash -c "sudo apt update"
  - docker exec -i roborb-soft bash -c "sudo apt install ros-$ROS_DISTRO-bare"
  - docker exec -i roborb-soft bash -c "/opt/ros/$ROS_DISTRO/initialize.sh"
# Create a catkin workspace with the package under integration.
install:
  - docker exec -i roborb-soft bash -c "source /opt/ros/$ROS_DISTRO/setup.bash && mkdir -p ~/catkin_ws/src && cd ~/catkin_ws/src && catkin_init_workspace && cd ~/catkin_ws && catkin_make"
  # Create the devel/setup.bash (run catkin_make with an empty workspace) and
  # source it to set the path variables.
  - docker exec -i roborb-soft bash -c "source /opt/ros/$ROS_DISTRO/setup.bash && cd ~/catkin_ws && catkin_make && source devel/setup.bash"
  # Add the package under integration to the workspace using a symlink.
  - docker exec -i roborb-soft bash -c "cd ~/catkin_ws/src && ln -s /var/tmp/ros-packages/ ."

# Install all dependencies, using wstool first and rosdep second.
# wstool looks for a ROSINSTALL_FILE defined in the environment variables.
before_script:
  # source dependencies: install using wstool.
  - docker exec -i roborb-soft bash -c "cd ~/catkin_ws/src && wstool init && if [[ -f $ROSINSTALL_FILE ]] ; then wstool merge $ROSINSTALL_FILE ; fi && wstool up"
  # package depdencies: install using rosdep.
  - docker exec -i roborb-soft bash -c "source /opt/ros/$ROS_DISTRO/kinetic/setup.bash && cd ~/catkin_ws && rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO"

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
  - docker exec -i roborb-soft bash -c "source /opt/ros/$ROS_DISTRO/setup.bash && cd ~/catkin_ws && catkin_make $( [ -f $CATKIN_OPTIONS ] && cat $CATKIN_OPTIONS )"
  # Run the tests, ensuring the path is set correctly.
  - docker exec -i roborb-soft bash -c "cd ~/catkin_ws && source devel/setup.bash && catkin_make run_tests && catkin_test_results"
